---
name: Modules.Facebook
summary: |
    Add-on Facebook module.  
description: |
    The Facebook module is used for connecting your application with 
    Facebook. This module supports the following features:

    * Logging in to Facebook and authorizing your application.

    * Making requests through the Facebook Graph API using the
      [requestWithGraphPath](Modules.Facebook.requestWithGraphPath) method.
      
    * Making requests through the legacy Facebook REST API using the
      [request](Modules.Facebook.request) method. 

    * Posting Facebook dialogs.

    For releases prior to 3.1.0, use the built-in Titanium.Facebook module.

    #### Getting Started

    -   Note that this module is only available for Release 3.1 and later, and is included with the
        Titanium SDK.  You do not need to download or unpack it.

    -   Edit the `modules` section of your tiapp.xml file to include this module:

            <modules>
                <!-- Add the appropriate line(s) to your modules section -->
                <module platform="android">facebook</module>
                <module platform="iphone">facebook</module>
            </modules>

    -    On the iOS platform, add the following property to your tiapp.xml file and replace
         FACEBOOK_APP_ID with your Facebook application ID:

             <property name="ti.facebook.appid">FACEBOOK_APP_ID</property>

    -    Instantiate the module with the `require('facebook')` method, then make subsequent API calls
         with the new Facebook object.

             var fb = require('facebook');
             fb.appid = FACEBOOK_APP_ID;
             fb.permissions = [FACEBOOK_APP_PERMISSIONS];
             fb.authorize();

    #### Facebook Login and Authorization

    To use Facebook, a user must log in to Facebook and explicitly authorize the
    application to perform certain actions, such as accessing profile information or 
    posting status messages. 

    For iOS, review the "iOS Support Notes" section below in addition to this section.

    There are two ways to initiate the login process:
    
    * Call [authorize](Modules.Facebook.authorize) to prompt the user to login and authorize
      the application.

    * Create a Facebook [LoginButton](Modules.Facebook.LoginButton) to allow the user to 
      log in if desired.

    Which approach you take depends on your UI and how central Facebook is to your
    application.

    Before calling `authorize` or creating a login button, you must set the
    [appid](Modules.Facebook.appid) and [permissions](Modules.Facebook.permissions)
    properties. 

    To create a Facebook App ID, go to the Facebook Developer App:
    [developers.facebook.com/apps](https://developers.facebook.com/apps)

    For a complete list of permissions, see the 
    [official Facebook Permissions Reference](http://developers.facebook.com/docs/reference/api/permissions/)

    #### Facebook Graph API

    The Facebook Graph API is the preferred method for getting information about a user's friends, 
    news feed, and so on. Each object in the Facebook social graph is represented by a
    graph API *object*, such as a user, photo, or status message. 

    The Graph API allows you to make requests on behalf of the user, such as posting a
    picture or status message. 

    Use the [requestWithGraphPath](Modules.Facebook.requestWithGraphPath) method to make a 
    request to the Graph API.

    For details on each of the Graph API objects and the supported operations, see the 
    [official Facebook Graph API documentation](http://developers.facebook.com/docs/reference/api/).

    #### Facebook REST API

    The Facebook REST API is in the process of being deprecated, and should not be used 
    unless your application relies on an API that doesn't exist in the Graph API.

    Use the [request](Modules.Facebook.request) method to make a request to the REST API.

    For details on the REST API, see the 
    [official Facebook REST API documentation](http://developers.facebook.com/docs/reference/rest/).
    
    #### Facebook Dialogs

    Facebook dialogs are standard user-interface components for used to prompt users to
    interact with Facebook in a specific way, such as:
        
    * Sending an application request

    * Sending a status update

    * Adding a friend
    
    Because dialogs require user interaction, they do not require Facebook permissions.

    For details on different dialogs see the 
    [official Facebook Dialogs documentation](http://developers.facebook.com/docs/reference/dialogs/).  

    #### iOS Support Notes
    
    As of Facebook Module 3.1, the iOS module will try to silently login on application startup
    if the application was logged in when it exited. This is done to maintain a consistent
    appearance regardless if your app was paused and resumed, or stopped and started, especially
    in light of iOS 6's single sign-on.

    To use iOS 6's built-in Facebook login, some changes may be required of your application.
    iOS 6 does not support having required [permissions](Modules.Facebook.permissions) of
    offline_access and any write access. Furthermore, Facebook's native SDK makes the
    old login auth and using iOS 6's login mutually exclusive options. In other words,
    the following must happen to use iOS 6's built-in facebook login:
    
    * When registering your Facebook application, the bundle ID must match the Titanium project's app ID.
      See instructions below.

    * The device must be running iOS 6.
    
    * Enable the Facebook login on your iOS 6 device: Enter your credentials in **Settings** > **Facebook**.
    
    * The [forceDialogAuth](Modules.Facebook.forceDialogAuth) property MUST be false.

    *   The [permissions](Modules.Facebook.permissions) property MUST NOT contain any of the
        following: offline_access, publish_actions, publish_stream, publish_checkins,
        ads_management, create_event, rsvp_event, manage_friendlists, manage_notifications,
        or manage_pages
    
    * Use the [reauthorize](Modules.Facebook.reauthorize) method to request write permissions if needed.

    In the event that these requirements aren't met, the facebook module will gracefully
    degrade to legacy login support, using the dialog authorization, single sign-on with
    the facebook app, or authentication via Safari as previously done.
    
    For security reasons, authorization through iOS 6 also requires your Facebook
    bundle ID to be associated with your Titanium application's app ID
    specified in your tiapp.xml. This is the same bundle identifier mentioned in step 4
    of Facebook's [getting started guide](http://developers.facebook.com/docs/getting-started/facebook-sdk-for-ios/3.1/).
    
    Since iOS 6 does not allow for required permissions to contain write actions, write
    actions are now done via the [reauthorize](Modules.Facebook.reauthorize) method. This
    method will work even without iOS 6 support. For more details about iOS 6, see the
    [official Facebook iOS 6 documentation](http://developers.facebook.com/docs/howtos/ios-6/).

    #### Submitting an iOS Application to the iTunes Store

    When including the Facebook module in an iOS project and built for the iTunes Store, during the
    validation process you may receive an error message referring to an Improper Advertising identifier
    [IDFA] Usage.

    As part of the Apple review process when submitting an application, you will be asked if your app
    uses the Advertising Identifier (IDFA). Please check "Yes". You will then be asked how your app
    makes use of it. The question will take this form:

        This app uses the Advertising Identifier to (select all that apply)?
        - Serve advertisements within the app
        - Attribute this app installation to a previously served advertisement
        - Attribute an action taken within this app to a previously served advertisement

    Select the second and third options.

    You will also be asked to check a box to confirm that your app honors a user's Limit Ad Tracking
    setting in iOS. The Facebook SDK honors the iOS Limited Ad Tracking Setting. When a person enables
    Limited Ad Tracking, Facebook only uses data obtained through the use of the Advertising Identifier
    for "Limited Advertising Purposes" as defined by the iOS Developer Program License Agreement. Please
    make sure to check this box when prompted.

    For more information, see [Facebook Issue #242477629268301](https://developers.facebook.com/bugs/242477629268301/)
    and [TIMODOPEN-391](https://jira.appcelerator.org/browse/TIMODOPEN-391).

extends: Titanium.Module
since: "3.1.0"
platforms: [android, iphone, ipad]
methods:

  - name: authorize
    summary: |
        Prompts the user to log in (if not already logged in) and authorize your application.  
    description: |
        Be sure to set your [appid](Modules.Facebook.appid) and your required 
        [permissions](Modules.Facebook.permissions) before calling `authorize`.

        A [login](Modules.Facebook.login) event is generated to indicate successful or
        unsuccessful login attempt.

  - name: dialog
    summary: Opens a supported Facebook dialog.
    description: |
        For a list of dialogs, parameters, and response formats, see the 
        [official documentation for Facebook Dialogs](http://developers.facebook.com/docs/reference/dialogs/).  

        The callback is invoked when the dialog is closed, either because the user
        approved the action, or canceled the dialog.
    parameters:
      - name: action
        summary: Specifies which dialog to show, such as "feed".
        type: String

      - name: params
        summary: |
            A dictionary object for pre-filling some of the dialog's fields.  
        type: Object

      - name: callback
        summary: Callback to invoke  when the user completes or cancels the dialog.
        type: Callback<FacebookDialogResponse>

  - name: logout
    summary: Clears the OAuth `accessToken` and logs out the user.

  - name: request
    summary: Makes a request to the legacy Facebook REST API.
    description: |
        For details on API calls and responses, see the 
        [offical Facebook REST API documentation](http://developers.facebook.com/docs/reference/rest/).
    parameters:

      - name: method
        summary: The REST API method to call.
        type: String

      - name: params
        summary: |
            A dictionary object for setting parameters required by the call, if any.
        type: Object

      - name: callback
        summary: Callback to invoke  when the request completes.
        type: Callback<FacebookRESTResponse>

  - name: requestWithGraphPath
    summary: Makes a Facebook Graph API request.
    description: |
        If the request requires user authorization, the user must be logged in, and your app
        must be authorized to make the request. You can check the
        [loggedIn](Modules.Facebook.loggedIn) property to determine if the user is logged in.

        Every Facebook object has an associated path. For example, "me" requests information about 
        the current user.

        For a complete list of Graph API methods, parameters and return types, see the 
        [official Facebook Graph API documentation](http://developers.facebook.com/docs/reference/api/).
    parameters:

      - name: path
        summary: Graph API path to request.  
        type: String

      - name: params
        summary: |
            A dictionary object for setting parameters required by the call, if any.  
        type: Dictionary

      - name: httpMethod
        summary: The HTTP method (GET/POST/DELETE) to use for the call.
        type: String

      - name: callback
        summary: Callback to invoke  when the request completes.
        type: Callback<FacebookGraphResponse>

  - name: reauthorize
    summary: Makes a request to Facebook for additional permissions.
    description: |
        iOS 6's facebook login forbids minimum authorization to include write permissions.
        In order to make any write actions, the app must reauthorize asking for the additional
        permissions. If the application already has these permissions, there will be no user
        interaction.
    platforms: [iphone, ipad]
    parameters:

      - name: permissions
        summary: |
            Array of additional permissions to request. For a complete list of permissions, see the 
            [official Facebook Permissions Reference](http://developers.facebook.com/docs/reference/api/permissions/)
        type: Array<String>

      - name: audience
        summary: |
            The extent of the visibility write permissions will have. The value of audience should be one of "me", "friends", or "everyone"
        type: String
        
      - name: callback
        summary: Callback to invoke when the request completes.
        type: Callback<FacebookReauthResponse>

  - name: publishInstall
    since: "3.4.1"
    summary: |
        Manually publish an attributed install to the facebook graph.  
    description: |
        Be sure to set your [appid](Modules.Facebook.appid) before calling `publishInstall`.

events:

  - name: login
    summary: Fired at session login.
    properties:
      - name: success
        summary: |
            Indicates if the user was logged in successfully.
            Returns `true` if request succeeded, `false` otherwise.
        type: Boolean

      - name: error
        summary: |
            Error message, if any returned.
            Will be undefined if `success` is `true`.
        type: String
    
      - name: code
        summary: |
            Error code.
            Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
            was generated by the operating system, that system's error value is used.
            Otherwise, this value will be -1.
        type: Number

      - name: uid
        summary: User ID returned by Facebook if the login was successful.
        type: String

      - name: data
        summary: |
            Data returned by Facebook when we query for the UID (using graph path "me")
            after a successful login. Data is in JSON format, and includes information 
            such as user name, locale and gender.

      - name: cancelled
        summary: Indicates if the user canceled the login request by closing the dialog.
        type: Boolean

  - name: logout
    summary: Fired at session logout.

properties:
  - name: BUTTON_STYLE_NORMAL
    summary: |
        Use with [LoginButton.style](Modules.Facebook.LoginButton.style) to specify
        the default login button reading "Connect" or "Login".
    type: Number
    permission: read-only

  - name: BUTTON_STYLE_WIDE
    summary: |
        Use with [LoginButton.style](Modules.Facebook.LoginButton.style) to specify
        a wide login button reading "Connect with Facebook" or "Login with Facebook".
    type: Number
    permission: read-only

  - name: accessToken
    summary: OAuth token set after a successful `authorize`.
    type: String
    permission: read-only

  - name: appid
    summary: Your Facebook application id. You need to set this for anything to work.
    type: String

  - name: expirationDate
    summary: Time at which the `accessToken` expires.
    type: Date
    permission: read-only

  - name: forceDialogAuth
    summary:  |
        Indicates whether the login should use the traditional dialog-based
        authentication.
    description: |
        Set to `false` to enable Single-Sign-On (SSO) in cases where the official Facebook app is on the 
        device.  Default is `true`, meaning the traditional, dialog-based
        authentication is used rather than SSO. See  the
        [Facebook Mobile Guide](http://developers.facebook.com/docs/guides/mobile) for 
        details of their Single-Sign-On scheme.
        
        To use the built-in iOS 6 login, set this property to `false`.
        This property is read-only on Mobile Web.
    type: Boolean
    default: true

  - name: loggedIn
    summary: Indicates if the user is logged in.
    type: Boolean
    permission: read-only

  - name: permissions
    summary: Array of permissions to request for your app. 
    description: |
        Be sure the permissions you want are set before calling
        [authorize](Modules.Facebook.authorize).

        To use the build-in iOS 6 login, this property cannot contain any of the following:
        offline_access, publish_actions, publish_stream, publish_checkins,
        ads_management, create_event, rsvp_event, manage_friendlists, manage_notifications,
        or manage_pages.

        For a complete list of permissions, see the 
        [official Facebook Permissions Reference](http://developers.facebook.com/docs/reference/api/permissions/)
    type: Array<String>

  - name: uid
    summary: Unique user ID returned from Facebook.
    type: String
    permission: read-only

examples:

  - title: Authorize
    example: |
        
        Shows official Facebook dialog for logging in the user and prompting the user to approve your 
        requested permissions.  Listen for the module's [login](Modules.Facebook.login) event to 
        determine whether the request succeeded.
        
            var fb = require('facebook');
            fb.appid = FACEBOOK_APP_ID;
            fb.permissions = ['publish_stream']; // Permissions your app needs
            fb.forceDialogAuth = true;
            fb.addEventListener('login', function(e) {
            	if (e.success) {
            		alert('Logged In');
            	} else if (e.error) {
            		alert(e.error);
            	} else if (e.cancelled) {
            		alert("Canceled");
            	}
            });
            fb.authorize();
        
  - title: Logout
    example: |
        
        Logout the user and forget the authorization token.  The 
        [logout](Modules.Facebook.logout) event is fired after the user is logged out.
        
            fb.addEventListener('logout', function(e) {
            	alert('Logged out');
            });
            fb.logout();
        
        
  - title: Authorize/Logout Using the Facebook LoginButton
    example: |
        
        You can use the the Facebook-themed [LoginButton](Modules.Facebook.LoginButton)
        to allow the user to log in as required. The button updates its state automatically depending 
        on whether the user is logged in or not.  When the user is logged in, then the button 
        will show "Logout", and vice-versa.
        
        Note that you don't need to set a click listener or anything else on the button. 
        To be notified when the user logs in or out, add event listeners for the 
        [login](Modules.Facebook.login) and [logout](Modules.Facebook.logout) events
        provided by the Facebook module, as in the example below.
        
            // Don't forget to set your appid and requested permissions, else the login button
            // won't be effective.
            var win = Ti.UI.createWindow({backgroundColor: 'white'});
            var fb = require('facebook');
            fb.appid = FACEBOOK_APP_ID;
            fb.permissions = ['publish_stream'];
            fb.addEventListener('login', function(e) {
            	if (e.success) {
            		alert('Logged in');
            	}
            });
            fb.addEventListener('logout', function(e) {
            	alert('Logged out');
            });
                
            // Add the button.  Note that it doesn't need a click event listener.
            win.add(fb.createLoginButton({
                top : 50,
                style : fb.BUTTON_STYLE_WIDE
            }));
            win.open()

        The specified button style ('wide' or `BUTTON_STYLE_WIDE`) shows a wide version of the 
        button that displays "Connect with Facebook" instead of just "Connect".

  - title: Alloy XML Markup
    example: |
        Example of using the Facebook Login Button in Alloy.

        This example loads the Facebook v3 module and assigns it to the `Alloy.Globals.Facebook` namespace
        in the initializer file.  In the XML markup, add a LoginButton element with its `ns`
        (namespace) attribute set to `Alloy.Globals.Facebook`.
        In the controller, use the `Alloy.Globals.Facebook` namespace to reference the Facebook module.

        `app.js`:

            // Loads the Facebook module, which can be referenced by Alloy.Globals.Facebook
            Alloy.Globals.Facebook = require('facebook');

        `app/views/index.xml`:

            <Alloy>
                <Window>
                     <!-- Use the Alloy.Globals.Facebook namespace to create a Facebook module login button -->
                    <LoginButton id="fbButton" ns="Alloy.Globals.Facebook"/>
                </Window>
            </Alloy>

        `app/controllers/index.js`:

            // Use the Alloy.Globals.Facebook namespace to make Facebook module API calls
            var facebook = Alloy.Globals.Facebook;
            facebook.appid = FACEBOOK_APP_ID;
            facebook.permissions = [FACEBOOK_APP_PERMISSIONS];
            $.fbButton.style = facebook.BUTTON_STYLE_WIDE;
            $.index.open();
        
  - title: Simple Graph API Call
    example: |
        
        This example makes a call to the "me" graph path, which represents the current
        user. The JSON results are simply displayed in an alert.  This example assumes 
        the user is already logged in. You can check this with <Modules.Facebook.loggedIn>.
        
            fb.requestWithGraphPath('me', {}, 'GET', function(e) {
            	if (e.success) {
            		alert(e.result);
            	} else if (e.error) {
            		alert(e.error);
            	} else {
            		alert('Unknown response');
            	}
            });
        
        
  - title: Create an Event Using the Graph API
    example: |
        
        This example uses the Graph API to create an event in the logged-on user's Facebook account.
        This requires the "create_event" permission.
        
            // First make sure this permission exists
            fb.permissions = ['create_event'];
            fb.authorize();
            
            // ...
            // ...
            
            // Now create the event after you've confirmed authorize() was successful.
            var starttime = new Date(2012, 4, 31, 17, 0);
            var endtime = new Date(2012, 4, 31, 19, 0);
            var title = "Barry's Birthday Celebration";
            var description = "Barry will have a great party";
            var data = {
            	start_time: JSON.stringify(starttime), // API expects a JSON stringified date
            	end_time: JSON.stringify(endtime),
            	summary: description,
            	name: title
            };
            fb.requestWithGraphPath('me/events', data, 'POST', function(e) {
            	if (e.success) {
            		alert("Success! Returned from FB: " + e.result);
            	} else {
            		if (e.error) {
            			alert(e.error);
            		} else {
            			alert("Unknown result");
            		}
            	}
            });
        
        For more information on the Event object, see:

        * [Event in the Facebook Graph API Reference](http://developers.facebook.com/docs/reference/api/event/).
        
  - title: Set a User's Facebook Status Using the Graph API
    example: |
        
        This example uses the Graph API to set the user's Facebook status, which requires the 
        "publish_stream" permission.
        
            // First make sure this permission exists
            fb.permissions = ['publish_stream'];
            fb.authorize();
            
            // ...
            // ...
            
            // Now create the status message after you've confirmed that authorize() succeeded
            fb.requestWithGraphPath('me/feed', {message: "Trying out FB Graph API and it's fun!"}, 
                     "POST", function(e) {
            	if (e.success) {
            		alert("Success!  From FB: " + e.result);
            	} else {
            		if (e.error) {
            			alert(e.error);
            		} else {
            			alert("Unkown result");
            		}
            	}
            });
        
        For more information on the Staus object, see:
        
        * [Status in the Facebook Graph API Reference](http://developers.facebook.com/docs/reference/api/status/).  
        
  - title: Post a Photo Using the Graph API
    example: |
        
        This example posts a photo to the user's account using the Graph API.
        Another example below shows how to do this with the REST API, if desired. 
        This requires the "publish_stream" permission.
        
            // First make sure this permission exists
            fb.permissions = ['publish_stream'];
            fb.authorize();
            
            // ...
            // ...
            
            // Now post the photo after you've confirmed that authorize() succeeded
            var f = Ti.Filesystem.getFile('pumpkin.jpg');
            var blob = f.read();
            var data = {
            	message: 'This is a pumpkin',
            	picture: blob
            };
            fb.requestWithGraphPath('me/photos', data, 'POST', function(e){
            	if (e.success) {
            		alert("Success!  From FB: " + e.result);
            	} else {
            		if (e.error) {
            			alert(e.error);
            		} else {
            			alert("Unkown result");
            		}
            	}
            });

        For more information on posting photos, see:

        * [Photo in the Facebook Graph API Reference](http://developers.facebook.com/docs/reference/api/photo/) 
        
        
  - title: Post a photo using the REST API
    example: |
        
        This example posts a photo to the user's account using the REST API. Another example above shows 
        how to do this with the Graph API.  This requires the "publish_stream" permission.
        
            // First make sure this permission exists
            fb.permissions = ['publish_stream'];
            fb.authorize();
            
            // ...
            // ...
            
            // Now post the photo after you've confirmed that authorize() succeeded
            var f = Ti.Filesystem.getFile('pumpkin.jpg');
            var blob = f.read();
            var data = {
            	caption: 'This is a pumpkin',
            	picture: blob
            };
            fb.request('photos.upload', data, function(e){
            	if (e.success) {
            		alert("Success!  From FB: " + e.result);
            	} else {
            		if (e.error) {
            			alert(e.error);
            		} else {
            			alert("Unkown result");
            		}
            	}
            });
        
        For more information on posting photos using the REST API, see:

        * [photos.upload in the Facebook REST API Reference](http://developers.facebook.com/docs/reference/rest/photos.upload/) 
        
  - title: Show the Facebook Feed Dialog
    example: |
        
        This example shows how to display the offical Facebook Feed Dialog, for adding a
        post to the user's wall. In this example, we'll prefill some of the feed fields by 
        passing a data dictionary to the [dialog](Modules.Facebook.dialog) method; this is not required.
        

            var data = {
                link : "http://www.appcelerator.com",
                name : "Appcelerator Titanium Mobile",
                message : "Checkout this cool open source project for creating mobile apps",
                caption : "Appcelerator Titanium Mobile",
                picture : "http://developer.appcelerator.com/assets/img/DEV_titmobile_image.png",
                description : "You've got the ideas, now you've got the power. Titanium translates " +
                              "your hard won web skills into native applications..."
            };
            fb.dialog("feed", data, function(e) {
                if(e.success && e.result) {
                    alert("Success! New Post ID: " + e.result);
                } else {
                    if(e.error) {
                        alert(e.error);
                    } else {
                        alert("User canceled dialog.");
                    }
                }
            });
        
        For more information on Facebook Dialogs, see:

        * [Facebook Dialog Reference](http://developers.facebook.com/docs/reference/dialogs/) 

  - title: Requesting additional permissions for iOS 6
    example: |

        To use the built-in iOS 6 Facebook login, the application cannot request offline or write permissions
        upon intialization and must ask for write permission using the
        [reauthroize](Modules.Facebook.reauthorize) method.
        This example shows how to use the `reauthorize` method to request additional permissions
        to publish a post to the user's wall.

            var fb = require('facebook');
            fb.appid = FACEBOOK_APP_ID;
            // Initial permissions must exclude offline and write priviledges
            fb.permissions = ['read_stream'];
            // This property needs to be false to use the built-in iOS 6 login
            fb.forceDialogAuth = false;
            fb.addEventListener('login', function(e) {
                if (e.success) {
                    alert('Logged In');
                } else if (e.error) {
                    alert(e.error);
                } else if (e.cancelled) {
                    alert("Canceled");
                }
            });

            var button = Ti.UI.createButton({title: 'Open Feed Dialog'});
            button.addEventListener('click', function(e){
                // Ask for write permission
                fb.reauthorize(['publish_stream'], 'me', function(e){
                    if (e.success) {
                        // If successful, proceed with a publish call
                        fb.dialog("feed", {}, function(e) {
                            if(e.success && e.result) {
                                alert("Success! New Post ID: " + e.result);
                            } else {
                                if(e.error) {
                                    alert(e.error);
                                } else {
                                    alert("User canceled dialog.");
                                }
                            }
                        });
                    } else {
                        if (e.error) {
                            alert(e.error);
                        } else {
                            alert("Unknown result");
                        }
                    }
                });
            });

            var win = Ti.UI.createWindow({backgroundColor: 'white'});
            win.add(button);
            win.open();

            if (!fb.loggedIn) {
                fb.authorize();
            }


---
name: FacebookGraphResponse
extends: ErrorResponse
summary: |
    Argument passed to the graph API callback, in response to a
    [requestWithGraphPath](Modules.Facebook.requestWithGraphPath) call.
properties:
  - name: path
    summary: Graph API path of the original request.
    type: String

  - name: result
    summary: |
        If successful, returns the JSON response returned by Facebook.
        If the request is not successfully completed, the result is undefined.
    type: String

---
name: FacebookReauthResponse
extends: ErrorResponse
summary: Argument passed to the reauthorize callback when the request is completed or canceled.
properties:

  - name: cancelled
    summary: Indicates if the user canceled the dialog. 
    type: Boolean


---
name: FacebookDialogResponse
extends: ErrorResponse
summary: Argument passed to the dialog callback when a dialog is completed or canceled.
description: |
    The `success` and `cancelled` properties may not be reliable for dialogs. In the event
    that the user canceled the dialog, the `result` field is `undefined`.
properties:

  - name: cancelled
    summary: Indicates if the user canceled the dialog. 
    type: Boolean

  - name: result
    summary: |
        If successful, returns the JSON response containing the `post_id` of the new post.
        If the user canceled the dialog, the results is undefined.
    type: String


---
name: FacebookRESTResponse
extends: ErrorResponse
summary: |
    Argument passed to the REST API callback when a request completes (successfully
    or unsuccessfully).
properties:

  - name: method
    summary: REST method call you specified.
    type: String

  - name: result
    summary: |
        If successful, returns the JSON response returned by Facebook.
        If the request is not successfully completed, the result is undefined.
    type: String

